{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get('http://localhost:8080/basicauth', {\n      headers: {\n        authorization: createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + ':' + password);\n  }\n\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors();\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n    console.log(\"removed from session\");\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUsername() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return null;\n    return user;\n  }\n\n  setupAxiosInterceptors() {\n    let username = 'jaideep';\n    let password = 'password';\n    let basicAuthHeader = createBasicAuthToken(username, password); // to encode username and password\n\n    axios.interceptors.request.use( // we can also intercept response\n    config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/jsagar2/JavaFullStackCourse/my-first-app/src/components/ToDo/AuthenticationService.js"],"names":["axios","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","window","btoa","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","logout","removeItem","console","log","isUserLoggedIn","user","getItem","getLoggedInUsername","basicAuthHeader","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA2B;AAEvBC,EAAAA,iCAAiC,CAACC,QAAD,EAAUC,QAAV,EAAmB;AAChD,WAAOJ,KAAK,CAACK,GAAN,CAAU,iCAAV,EACH;AACIC,MAAAA,OAAO,EAAC;AACJC,QAAAA,aAAa,EAAGC,oBAAoB,CAACL,QAAD,EAAUC,QAAV;AADhC;AADZ,KADG,CAAP;AAOH;;AACDI,EAAAA,oBAAoB,CAACL,QAAD,EAAUC,QAAV,EAAmB;AACnC,WAAO,WAAWK,MAAM,CAACC,IAAP,CAAYP,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB;AACH;;AAEDO,EAAAA,uBAAuB,CAACR,QAAD,EAAUC,QAAV,EAAmB;AACtCQ,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA2CV,QAA3C;AACA,SAAKW,sBAAL;AACH;;AACDC,EAAAA,MAAM,GAAE;AACJH,IAAAA,cAAc,CAACI,UAAf,CAA0B,mBAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH;;AACDC,EAAAA,cAAc,GAAE;AACZ,QAAIC,IAAI,GAAGR,cAAc,CAACS,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAG,IAAV,EACI,OAAO,KAAP;AAEJ,WAAO,IAAP;AACH;;AACDE,EAAAA,mBAAmB,GAAE;AACjB,QAAIF,IAAI,GAAGR,cAAc,CAACS,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAG,IAAV,EACI,OAAO,IAAP;AAEJ,WAAOA,IAAP;AACH;;AACDN,EAAAA,sBAAsB,GAAE;AACpB,QAAIX,QAAQ,GAAG,SAAf;AACA,QAAIC,QAAQ,GAAG,UAAf;AACA,QAAImB,eAAe,GAAGf,oBAAoB,CAACL,QAAD,EAAUC,QAAV,CAA1C,CAHoB,CAG0C;;AAE9DJ,IAAAA,KAAK,CAACwB,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,EAAgC;AAC3BC,IAAAA,MAAD,IAAW;AACP,UAAG,KAAKR,cAAL,EAAH,EAAyB;AACrBQ,QAAAA,MAAM,CAACrB,OAAP,CAAeC,aAAf,GAA+BgB,eAA/B;AACH;;AACD,aAAOI,MAAP;AACH,KANL;AAQH;;AAlDsB;;AAqD3B,eAAe,IAAI1B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\n\r\nclass AuthenticationService{\r\n\r\n    executeBasicAuthenticationService(username,password){\r\n        return axios.get('http://localhost:8080/basicauth',\r\n            {\r\n                headers:{\r\n                    authorization : createBasicAuthToken(username,password)\r\n                }\r\n            }\r\n        )\r\n    }\r\n    createBasicAuthToken(username,password){\r\n        return 'Basic ' + window.btoa(username + ':' + password)\r\n    }\r\n\r\n    registerSuccessfulLogin(username,password){\r\n        sessionStorage.setItem('authenticatedUser',username);\r\n        this.setupAxiosInterceptors()\r\n    }\r\n    logout(){\r\n        sessionStorage.removeItem('authenticatedUser');\r\n        console.log(\"removed from session\")\r\n    }\r\n    isUserLoggedIn(){\r\n        let user = sessionStorage.getItem(\"authenticatedUser\");\r\n        if(user===null)\r\n            return false \r\n          \r\n        return true\r\n    }\r\n    getLoggedInUsername(){\r\n        let user = sessionStorage.getItem(\"authenticatedUser\");\r\n        if(user===null)\r\n            return null \r\n          \r\n        return user\r\n    }\r\n    setupAxiosInterceptors(){\r\n        let username = 'jaideep';\r\n        let password = 'password';\r\n        let basicAuthHeader = createBasicAuthToken(username,password) // to encode username and password\r\n\r\n        axios.interceptors.request.use( // we can also intercept response\r\n            (config) =>{\r\n                if(this.isUserLoggedIn()){\r\n                    config.headers.authorization = basicAuthHeader\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}