{"ast":null,"code":"import axios from 'axios';\nimport { API_URL } from '../../Constants.js';\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get(`${API_URL}/basicauth`, {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    return axios.post(`${API_URL}/authenticate`, {\n      username,\n      password\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + ':' + password); // to encode username and password, in case of basic authentication (no form) we needto encode the credentials\n  }\n\n  createJwtToken(token) {\n    return 'Bearer ' + token;\n  }\n  /*registerSuccessfulLogin(username,password){\r\n      sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME,username);\r\n      this.setupAxiosInterceptors()\r\n  }*/\n\n\n  registerSuccessfulLogin(username, password) {\n    //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\n    //console.log('registerSuccessfulLogin')\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createBasicAuthToken(username, password));\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username);\n    this.setupAxiosInterceptors(this.createJwtToken(token));\n    console.log('registering done');\n  }\n\n  logout() {\n    sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    console.log(\"removed from session\");\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUsername() {\n    let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    if (user === null) return null;\n    return user;\n  }\n  /*setupAxiosInterceptors(){\r\n      let username = 'jaideep';\r\n      let password = 'password';\r\n      let basicAuthHeader = this.createBasicAuthToken(username,password) \r\n        axios.interceptors.request.use( // we can also intercept response\r\n          (config) =>{\r\n              if(this.isUserLoggedIn()){\r\n                  config.headers.authorization = basicAuthHeader\r\n              }\r\n              return config\r\n          }\r\n      )\r\n  }*/\n\n\n  setupAxiosInterceptors(token) {\n    axios.interceptors.request.use(config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n    console.log('interceptor is set');\n    console.log(token);\n  }\n\n  setupAxiosInterceptorsForJwt(token) {\n    axios.interceptors.request.use( // we can also intercept response\n    config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = token;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/jsagar2/JavaFullStackCourse/my-first-app/src/components/ToDo/AuthenticationService.js"],"names":["axios","API_URL","USER_NAME_SESSION_ATTRIBUTE_NAME","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","executeJwtAuthenticationService","post","window","btoa","createJwtToken","token","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","registerSuccessfulLoginForJwt","console","log","logout","removeItem","isUserLoggedIn","user","getItem","getLoggedInUsername","interceptors","request","use","config","setupAxiosInterceptorsForJwt"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { API_URL } from '../../Constants.js'\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\r\nclass AuthenticationService{\r\n\r\n    executeBasicAuthenticationService(username,password){\r\n        return axios.get(`${API_URL}/basicauth`,\r\n            {\r\n                headers : {\r\n                        authorization : this.createBasicAuthToken(username,password)\r\n                }\r\n            }\r\n        \r\n        )\r\n    }\r\n    executeJwtAuthenticationService(username,password){\r\n        return axios.post(`${API_URL}/authenticate`,{\r\n            username,\r\n            password        \r\n        })\r\n    }\r\n\r\n    createBasicAuthToken(username,password){\r\n        return 'Basic ' + window.btoa(username + ':' + password) // to encode username and password, in case of basic authentication (no form) we needto encode the credentials\r\n    }\r\n    createJwtToken(token){\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    /*registerSuccessfulLogin(username,password){\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME,username);\r\n        this.setupAxiosInterceptors()\r\n    }*/\r\n    registerSuccessfulLogin(username, password) {\r\n        //let basicAuthHeader = 'Basic ' +  window.btoa(username + \":\" + password)\r\n        //console.log('registerSuccessfulLogin')\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        this.setupAxiosInterceptors(this.createBasicAuthToken(username, password))\r\n    }\r\n    registerSuccessfulLoginForJwt(username,token){\r\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME,username);\r\n        this.setupAxiosInterceptors(this.createJwtToken(token));\r\n        console.log('registering done')\r\n    }\r\n    \r\n\r\n    logout(){\r\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n        console.log(\"removed from session\")\r\n    }\r\n    isUserLoggedIn(){\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n        if(user===null)\r\n            return false \r\n          \r\n        return true\r\n    }\r\n    getLoggedInUsername(){\r\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n        if(user===null)\r\n            return null \r\n          \r\n        return user\r\n    }\r\n    /*setupAxiosInterceptors(){\r\n        let username = 'jaideep';\r\n        let password = 'password';\r\n        let basicAuthHeader = this.createBasicAuthToken(username,password) \r\n\r\n        axios.interceptors.request.use( // we can also intercept response\r\n            (config) =>{\r\n                if(this.isUserLoggedIn()){\r\n                    config.headers.authorization = basicAuthHeader\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }*/\r\n    setupAxiosInterceptors(token) {\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n        console.log('interceptor is set')\r\n        console.log(token)\r\n    }\r\n    setupAxiosInterceptorsForJwt(token){\r\n       \r\n       \r\n\r\n        axios.interceptors.request.use( // we can also intercept response\r\n            (config) =>{\r\n                if(this.isUserLoggedIn()){\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}