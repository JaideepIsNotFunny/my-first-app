{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  executeBasicAuthenticationService(username, password) {\n    return axios.get('http://localhost:8080/restful-web-services/basicauth', {\n      headers: {\n        authorization: this.createBasicAuthToken(username, password)\n      }\n    });\n  }\n\n  executeJwtAuthenticationService(username, password) {\n    return axios.post('http://localhost:8080/restful-web-services/basicauth', {\n      username,\n      password\n    });\n  }\n\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + ':' + password); // to encode username and password, in case of basic authentication (no form) we needto encode the credentials\n  }\n\n  registerSuccessfulLogin(username, password) {\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors();\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    sessionStorage.setItem('authenticatedUser', username);\n    this.setupAxiosInterceptors(this.createJwtToken(token));\n  }\n\n  createJwtToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  logout() {\n    sessionStorage.removeItem('authenticatedUser');\n    console.log(\"removed from session\");\n  }\n\n  isUserLoggedIn() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return false;\n    return true;\n  }\n\n  getLoggedInUsername() {\n    let user = sessionStorage.getItem(\"authenticatedUser\");\n    if (user === null) return null;\n    return user;\n  }\n\n  setupAxiosInterceptors() {\n    let username = 'jaideep';\n    let password = 'password';\n    let basicAuthHeader = this.createBasicAuthToken(username, password);\n    axios.interceptors.request.use( // we can also intercept response\n    config => {\n      if (this.isUserLoggedIn()) {\n        config.headers.authorization = basicAuthHeader;\n      }\n\n      return config;\n    });\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/Users/jsagar2/JavaFullStackCourse/my-first-app/src/components/ToDo/AuthenticationService.js"],"names":["axios","AuthenticationService","executeBasicAuthenticationService","username","password","get","headers","authorization","createBasicAuthToken","executeJwtAuthenticationService","post","window","btoa","registerSuccessfulLogin","sessionStorage","setItem","setupAxiosInterceptors","registerSuccessfulLoginForJwt","token","createJwtToken","logout","removeItem","console","log","isUserLoggedIn","user","getItem","getLoggedInUsername","basicAuthHeader","interceptors","request","use","config"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA2B;AAEvBC,EAAAA,iCAAiC,CAACC,QAAD,EAAUC,QAAV,EAAmB;AAChD,WAAOJ,KAAK,CAACK,GAAN,CAAU,sDAAV,EACH;AACIC,MAAAA,OAAO,EAAG;AACFC,QAAAA,aAAa,EAAG,KAAKC,oBAAL,CAA0BL,QAA1B,EAAmCC,QAAnC;AADd;AADd,KADG,CAAP;AAQH;;AAEDK,EAAAA,+BAA+B,CAACN,QAAD,EAAUC,QAAV,EAAmB;AAC9C,WAAOJ,KAAK,CAACU,IAAN,CAAW,sDAAX,EAAkE;AACrEP,MAAAA,QADqE;AAErEC,MAAAA;AAFqE,KAAlE,CAAP;AAIH;;AACDI,EAAAA,oBAAoB,CAACL,QAAD,EAAUC,QAAV,EAAmB;AACnC,WAAO,WAAWO,MAAM,CAACC,IAAP,CAAYT,QAAQ,GAAG,GAAX,GAAiBC,QAA7B,CAAlB,CADmC,CACsB;AAC5D;;AAEDS,EAAAA,uBAAuB,CAACV,QAAD,EAAUC,QAAV,EAAmB;AACtCU,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA2CZ,QAA3C;AACA,SAAKa,sBAAL;AACH;;AAEDC,EAAAA,6BAA6B,CAACd,QAAD,EAAUe,KAAV,EAAgB;AACzCJ,IAAAA,cAAc,CAACC,OAAf,CAAuB,mBAAvB,EAA2CZ,QAA3C;AACA,SAAKa,sBAAL,CAA4B,KAAKG,cAAL,CAAoBD,KAApB,CAA5B;AACH;;AACDC,EAAAA,cAAc,CAACD,KAAD,EAAO;AACjB,WAAO,YAAYA,KAAnB;AACH;;AAEDE,EAAAA,MAAM,GAAE;AACJN,IAAAA,cAAc,CAACO,UAAf,CAA0B,mBAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH;;AACDC,EAAAA,cAAc,GAAE;AACZ,QAAIC,IAAI,GAAGX,cAAc,CAACY,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAG,IAAV,EACI,OAAO,KAAP;AAEJ,WAAO,IAAP;AACH;;AACDE,EAAAA,mBAAmB,GAAE;AACjB,QAAIF,IAAI,GAAGX,cAAc,CAACY,OAAf,CAAuB,mBAAvB,CAAX;AACA,QAAGD,IAAI,KAAG,IAAV,EACI,OAAO,IAAP;AAEJ,WAAOA,IAAP;AACH;;AACDT,EAAAA,sBAAsB,GAAE;AACpB,QAAIb,QAAQ,GAAG,SAAf;AACA,QAAIC,QAAQ,GAAG,UAAf;AACA,QAAIwB,eAAe,GAAG,KAAKpB,oBAAL,CAA0BL,QAA1B,EAAmCC,QAAnC,CAAtB;AAEAJ,IAAAA,KAAK,CAAC6B,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,EAAgC;AAC3BC,IAAAA,MAAD,IAAW;AACP,UAAG,KAAKR,cAAL,EAAH,EAAyB;AACrBQ,QAAAA,MAAM,CAAC1B,OAAP,CAAeC,aAAf,GAA+BqB,eAA/B;AACH;;AACD,aAAOI,MAAP;AACH,KANL;AAQH;;AAnEsB;;AAsE3B,eAAe,IAAI/B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\n\r\nclass AuthenticationService{\r\n\r\n    executeBasicAuthenticationService(username,password){\r\n        return axios.get('http://localhost:8080/restful-web-services/basicauth',\r\n            {\r\n                headers : {\r\n                        authorization : this.createBasicAuthToken(username,password)\r\n                }\r\n            }\r\n        \r\n        )\r\n    }\r\n\r\n    executeJwtAuthenticationService(username,password){\r\n        return axios.post('http://localhost:8080/restful-web-services/basicauth',{\r\n            username,\r\n            password        \r\n        })\r\n    }\r\n    createBasicAuthToken(username,password){\r\n        return 'Basic ' + window.btoa(username + ':' + password) // to encode username and password, in case of basic authentication (no form) we needto encode the credentials\r\n    }\r\n\r\n    registerSuccessfulLogin(username,password){\r\n        sessionStorage.setItem('authenticatedUser',username);\r\n        this.setupAxiosInterceptors()\r\n    }\r\n\r\n    registerSuccessfulLoginForJwt(username,token){\r\n        sessionStorage.setItem('authenticatedUser',username);\r\n        this.setupAxiosInterceptors(this.createJwtToken(token))\r\n    }\r\n    createJwtToken(token){\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    logout(){\r\n        sessionStorage.removeItem('authenticatedUser');\r\n        console.log(\"removed from session\")\r\n    }\r\n    isUserLoggedIn(){\r\n        let user = sessionStorage.getItem(\"authenticatedUser\");\r\n        if(user===null)\r\n            return false \r\n          \r\n        return true\r\n    }\r\n    getLoggedInUsername(){\r\n        let user = sessionStorage.getItem(\"authenticatedUser\");\r\n        if(user===null)\r\n            return null \r\n          \r\n        return user\r\n    }\r\n    setupAxiosInterceptors(){\r\n        let username = 'jaideep';\r\n        let password = 'password';\r\n        let basicAuthHeader = this.createBasicAuthToken(username,password) \r\n\r\n        axios.interceptors.request.use( // we can also intercept response\r\n            (config) =>{\r\n                if(this.isUserLoggedIn()){\r\n                    config.headers.authorization = basicAuthHeader\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}