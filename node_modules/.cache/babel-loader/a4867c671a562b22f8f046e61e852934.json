{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jsagar2\\\\JavaFullStackCourse\\\\my-first-app\\\\src\\\\components\\\\ToDo\\\\ListToDoComponent.jsx\";\nimport React, { Component } from 'react';\nimport \"./ToDoApp.css\";\nimport propTypes from \"prop-types\";\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\nimport AuthenticationService from './AuthenticationService.js';\nimport AuthenticatedRoute from \"./AuthenticatedRoute.jsx\";\nimport TodoDataService from \"../../api/todo/TodoDataService.js\";\nimport TodoComponent from \"./TodoComponent\";\nimport moment from 'moment';\n\nclass ListToDoComponent extends Component {\n  // Initial API call should not be done in constructor, the state will not be initialized untill the API call is completed, which s nto a good state to be in\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: [// {id:1,description :\"Learn React\", done:false, targetDate : new Date},\n        // {id:2,description :\"Make money\", done:false, targetDate : new Date},\n        // {id:3,description :\"write story\", done:false, targetDate : new Date}\n      ],\n      successMessage: null,\n      failureMessage: null\n    };\n    this.deleteTodoClicked = this.deleteTodoClicked.bind(this);\n    this.updateTodoClicked = this.updateTodoClicked.bind(this);\n    this.addTodoClicked = this.addTodoClicked.bind(this);\n    this.refreshTodos = this.refreshTodos.bind(this);\n  }\n\n  componentDidMount() {\n    // when component is mounted, this method is called \n    let username = AuthenticationService.getLoggedInUsername();\n    console.log(\"component did mount\");\n    TodoDataService.retrieveAllTodos(username).then(response => {\n      console.log(response);\n      this.setState({\n        todos: response.data\n      });\n    });\n  }\n\n  refreshTodos() {\n    let username = AuthenticationService.getLoggedInUsername(); // this.state.successMessage = null;\n    // this.state.failureMessage = null;\n\n    TodoDataService.retrieveAllTodos(username).then(response => {\n      //console.log(response)\n      this.setState({\n        todos: response.data\n      });\n    });\n  }\n\n  deleteTodoClicked(id) {\n    let username = AuthenticationService.getLoggedInUsername();\n    TodoDataService.deleteTodo(username, id).then(response => {\n      this.setState({\n        successMessage: \"Todo deleted succesfully\"\n      });\n      this.refreshTodos();\n    }).catch(error => {\n      this.setState({\n        failureMessage: \"Some error occured\"\n      });\n    });\n  }\n\n  completeTodoClicked(todo) {\n    // let username = AuthenticationService.getLoggedInUsername()\n    // TodoDataService.retrieveTodo(username,id)\n    // .then(\n    //     response => {\n    //         let todo = {\n    //             id : response.data.id,\n    //             username : response.data.username,\n    //             description : response.data.description,\n    //             targetDate : response.data.targetDate,\n    //             done: true\n    //         };\n    //         TodoDataService.updateTodo(username,id,todo)\n    //         .then(\n    //             () =>{\n    //                 this.props.history.push('/todos')\n    //                 this.setState({failureMessage: \"\"});\n    //                 this.setState({successMessage: \"Completed successfully\"});\n    //             }\n    //         )\n    //         .catch(\n    //             error =>{\n    //                 this.setState({successMessage: \"\"});\n    //                 this.setState({failureMessage: \"Some error occured, while updating the todo\"});\n    //             } \n    //         )\n    //     }\n    // )\n    // .catch(\n    //     error =>{\n    //         this.setState({successMessage: \"\"});\n    //         this.setState({failureMessage: \"Some error occured, while finding the todo\"});\n    //     }\n    // )\n    todo.done = true;\n    TodoDataService.updateTodo(todo.username, todo.id, todo).then(() => {\n      this.props.history.push('/todos');\n      this.setState({\n        failureMessage: \"\"\n      });\n      this.setState({\n        successMessage: \"Completed successfully\"\n      });\n      this.refreshTodos();\n    }).catch(error => {\n      this.setState({\n        successMessage: \"\"\n      });\n      this.setState({\n        failureMessage: \"Some error occured, while updating the todo\"\n      });\n    });\n  }\n\n  updateTodoClicked(id) {\n    let username = AuthenticationService.getLoggedInUsername();\n    this.props.history.push(`/todos/${id}`); // TodoDataService.deleteTodo(username,id)\n    // .then(response =>{\n    //         this.setState({message: \"Todo deleted succesfully\"});\n    //         this.setState({deleteMessageClass: \"alert alert-success\"})\n    //         this.refreshTodos();\n    //     }\n    // )\n    // .catch(\n    //     error => {\n    //         this.setState({message: \"Some error occured\"});\n    //         this.setState({deleteMessageClass: \"alert alert-success\"})\n    //     }\n    // )\n  }\n\n  addTodoClicked(id) {\n    let username = AuthenticationService.getLoggedInUsername();\n    this.props.history.push(`/todos/-1`);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container padding\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, \"Welcome \", sessionStorage.getItem('authenticatedUser'), \" \"), /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"header-todo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }\n    }, \"List To Do\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-success action-button\",\n      onClick: this.addTodoClicked,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 25\n      }\n    }, \"Add Task\")), this.state.successMessage && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 51\n      }\n    }, this.state.successMessage), this.state.failureMessage && /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-danger\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 51\n      }\n    }, this.state.failureMessage), /*#__PURE__*/React.createElement(\"table\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"thead\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 37\n      }\n    }, \"Action\"), /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 52\n      }\n    }, \"Description\"), \" \", /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 73\n      }\n    }, \"Target Date\"), \" \", /*#__PURE__*/React.createElement(\"th\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 94\n      }\n    }, \"Completed?\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 25\n      }\n    }, this.state.todos.map(todo => /*#__PURE__*/React.createElement(\"tr\", {\n      key: todo.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-danger action-button\",\n      onClick: () => this.deleteTodoClicked(todo.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 45\n      }\n    }, \"Remove\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-success action-button\",\n      onClick: () => this.updateTodoClicked(todo.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 45\n      }\n    }, \"Update\")), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 41\n      }\n    }, todo.description), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 68\n      }\n    }, moment(todo.targetDate).format(\"YYYY-MM-DD\").toString()), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 41\n      }\n    }, todo.done ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 53\n      }\n    }, \"done\") : /*#__PURE__*/React.createElement(\"button\", {\n      className: \"btn btn-success action-button\",\n      onClick: () => this.completeTodoClicked(todo),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 71\n      }\n    }, \"Complete\"))))))));\n  }\n\n}\n\nexport default ListToDoComponent;","map":{"version":3,"sources":["C:/Users/jsagar2/JavaFullStackCourse/my-first-app/src/components/ToDo/ListToDoComponent.jsx"],"names":["React","Component","propTypes","BrowserRouter","Router","Route","Switch","Link","AuthenticationService","AuthenticatedRoute","TodoDataService","TodoComponent","moment","ListToDoComponent","constructor","props","state","todos","successMessage","failureMessage","deleteTodoClicked","bind","updateTodoClicked","addTodoClicked","refreshTodos","componentDidMount","username","getLoggedInUsername","console","log","retrieveAllTodos","then","response","setState","data","id","deleteTodo","catch","error","completeTodoClicked","todo","done","updateTodo","history","push","render","sessionStorage","getItem","map","description","targetDate","format","toString"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport \"./ToDoApp.css\"\r\n\r\nimport propTypes from \"prop-types\"\r\nimport {BrowserRouter as Router,Route,Switch,Link} from 'react-router-dom'\r\nimport AuthenticationService from './AuthenticationService.js'\r\nimport AuthenticatedRoute from \"./AuthenticatedRoute.jsx\"\r\nimport TodoDataService from \"../../api/todo/TodoDataService.js\"\r\nimport TodoComponent from \"./TodoComponent\"\r\nimport moment from 'moment'\r\n\r\n\r\nclass ListToDoComponent extends Component{  // Initial API call should not be done in constructor, the state will not be initialized untill the API call is completed, which s nto a good state to be in\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            todos :\r\n            [\r\n                // {id:1,description :\"Learn React\", done:false, targetDate : new Date},\r\n                // {id:2,description :\"Make money\", done:false, targetDate : new Date},\r\n                // {id:3,description :\"write story\", done:false, targetDate : new Date}\r\n            ],\r\n            successMessage : null,\r\n            failureMessage : null\r\n        }\r\n        this.deleteTodoClicked = this.deleteTodoClicked.bind(this);\r\n        this.updateTodoClicked = this.updateTodoClicked.bind(this);\r\n        this.addTodoClicked = this.addTodoClicked.bind(this);\r\n        this.refreshTodos = this.refreshTodos.bind(this);\r\n    }\r\n    componentDidMount(){ // when component is mounted, this method is called \r\n        \r\n        let username = AuthenticationService.getLoggedInUsername();\r\n        console.log(\"component did mount\")\r\n        TodoDataService.retrieveAllTodos(username)\r\n        .then(\r\n            response => {\r\n                \r\n                console.log(response)\r\n                this.setState({todos:response.data})\r\n            }\r\n        )\r\n    }\r\n    refreshTodos(){\r\n        let username = AuthenticationService.getLoggedInUsername();\r\n        // this.state.successMessage = null;\r\n        // this.state.failureMessage = null;\r\n        TodoDataService.retrieveAllTodos(username)\r\n        .then(\r\n            response => {\r\n                //console.log(response)\r\n                this.setState({todos:response.data})\r\n            }\r\n        )\r\n    }\r\n    deleteTodoClicked(id){\r\n        let username = AuthenticationService.getLoggedInUsername();\r\n        TodoDataService.deleteTodo(username,id)\r\n        .then(response =>{\r\n                this.setState({successMessage: \"Todo deleted succesfully\"});             \r\n                this.refreshTodos();\r\n            }\r\n        )\r\n        .catch(\r\n            error => {\r\n                this.setState({failureMessage: \"Some error occured\"});\r\n                \r\n            }\r\n        )\r\n\r\n    }\r\n    completeTodoClicked(todo){\r\n\r\n        // let username = AuthenticationService.getLoggedInUsername()\r\n        // TodoDataService.retrieveTodo(username,id)\r\n        // .then(\r\n        //     response => {\r\n        //         let todo = {\r\n        //             id : response.data.id,\r\n        //             username : response.data.username,\r\n        //             description : response.data.description,\r\n        //             targetDate : response.data.targetDate,\r\n        //             done: true\r\n        //         };\r\n            \r\n        //         TodoDataService.updateTodo(username,id,todo)\r\n        //         .then(\r\n        //             () =>{\r\n        //                 this.props.history.push('/todos')\r\n        //                 this.setState({failureMessage: \"\"});\r\n        //                 this.setState({successMessage: \"Completed successfully\"});\r\n        //             }\r\n        //         )\r\n        //         .catch(\r\n        //             error =>{\r\n        //                 this.setState({successMessage: \"\"});\r\n        //                 this.setState({failureMessage: \"Some error occured, while updating the todo\"});\r\n        //             } \r\n        //         )\r\n        //     }\r\n        // )\r\n        // .catch(\r\n        //     error =>{\r\n        //         this.setState({successMessage: \"\"});\r\n        //         this.setState({failureMessage: \"Some error occured, while finding the todo\"});\r\n        //     }\r\n        // )\r\n        todo.done = true;\r\n        TodoDataService.updateTodo(todo.username,todo.id,todo)\r\n        .then(\r\n            () =>{\r\n                this.props.history.push('/todos')\r\n                this.setState({failureMessage: \"\"});\r\n                this.setState({successMessage: \"Completed successfully\"});\r\n                this.refreshTodos();\r\n            }\r\n        )\r\n        .catch(\r\n            error =>{\r\n                this.setState({successMessage: \"\"});\r\n                this.setState({failureMessage: \"Some error occured, while updating the todo\"});\r\n            } \r\n        )\r\n    \r\n    }\r\n    updateTodoClicked(id){\r\n        let username = AuthenticationService.getLoggedInUsername();\r\n        this.props.history.push(`/todos/${id}`)\r\n        // TodoDataService.deleteTodo(username,id)\r\n        // .then(response =>{\r\n        //         this.setState({message: \"Todo deleted succesfully\"});\r\n        //         this.setState({deleteMessageClass: \"alert alert-success\"})\r\n        //         this.refreshTodos();\r\n        //     }\r\n        // )\r\n        // .catch(\r\n        //     error => {\r\n        //         this.setState({message: \"Some error occured\"});\r\n        //         this.setState({deleteMessageClass: \"alert alert-success\"})\r\n        //     }\r\n        // )\r\n\r\n    }\r\n    addTodoClicked(id){\r\n        let username = AuthenticationService.getLoggedInUsername();\r\n        this.props.history.push(`/todos/-1`)\r\n       \r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <div className=\"container padding\">\r\n                {/*<h2>Welcome {this.props.match.params.name} </h2>*/}\r\n                <h2>Welcome {sessionStorage.getItem('authenticatedUser')} </h2>\r\n                <h3 className='header-todo'>List To Do</h3>\r\n                <div className=\"container \">\r\n                    <div> \r\n                        \r\n                        <button className=\"btn btn-success action-button\" onClick={this.addTodoClicked}>Add Task</button>  \r\n                        \r\n                    </div>\r\n                    {this.state.successMessage && <div className=\"alert alert-success\">\r\n                        {this.state.successMessage}\r\n                    </div>}\r\n                    {this.state.failureMessage && <div className=\"alert alert-danger\">\r\n                        {this.state.failureMessage}\r\n                    </div>}\r\n                    <table className=\"table\">\r\n                        <thead >\r\n                            <tr>\r\n                                    <th>Action</th><th>Description</th> <th>Target Date</th> <th>Completed?</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n\r\n                            {\r\n                                this.state.todos.map(\r\n                                    todo =>\r\n                                    <tr key={todo.id}>\r\n                                        <td>\r\n                                            <button className=\"btn btn-danger action-button\" onClick={() => this.deleteTodoClicked(todo.id)}>Remove</button>\r\n                                             \r\n                                            <button className=\"btn btn-success action-button\"  onClick={() => this.updateTodoClicked(todo.id)}>Update</button> \r\n                                        </td>\r\n                                        <td>{todo.description}</td><td>{moment(todo.targetDate).format(\"YYYY-MM-DD\").toString()}</td> \r\n                                        <td>\r\n                                        {todo.done ?<div>done</div> : <button className=\"btn btn-success action-button\" onClick={() => this.completeTodoClicked(todo)}>Complete</button>}\r\n                                        \r\n                                        </td>\r\n                                        \r\n                                    </tr>\r\n                                ) \r\n                            }                      \r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default ListToDoComponent;"]},"metadata":{},"sourceType":"module"}