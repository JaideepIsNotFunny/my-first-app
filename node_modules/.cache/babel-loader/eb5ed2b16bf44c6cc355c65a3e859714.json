{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jsagar2\\\\JavaFullStackCourse\\\\my-first-app\\\\src\\\\components\\\\counter\\\\Counter.jsx\";\nimport React, { Component } from 'react';\nimport \"./Counter.css\";\nimport propTypes from \"prop-types\";\n\nclass Counter extends Component {\n  constructor() {\n    super();\n    this.state = {\n      counter: 0,\n      secondCounter: 100\n    };\n    this.increment = this.increment.bind(this); // we are binding this with all functions, except an arrow method\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CounterButton, {\n      incrementMethod: this.increment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(CounterButton, {\n      by: 2,\n      incrementMethod: this.increment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(CounterButton, {\n      by: 3,\n      incrementMethod: this.increment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }\n    }, \"Reset\"), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 54\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"result\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }, \" \", this.state.counter));\n  }\n\n  increment(by) {\n    //this.state.counter ++; //bad practise\n\n    /*this.setState({ // setState merges the updated values\r\n        counter : this.state.counter + by\r\n    })*/\n    this.setState(prevState => {\n      return {\n        counter: prevState.counter + by\n      };\n    });\n  }\n\n  decrement(by) {\n    //this.state.counter ++; //bad practise\n\n    /*this.setState({ // setState merges the updated values\r\n        counter : this.state.counter + by\r\n    })*/\n    this.setState(prevState => {\n      return {\n        counter: prevState.counter - by\n      };\n    });\n  }\n\n  reset() {\n    this.setState(prevState => {\n      return {\n        counter: 0\n      };\n    });\n  }\n\n}\n\nclass CounterButton extends Component {\n  constructor() {\n    super();\n    this.state = {\n      counter: 0,\n      secondCounter: 100\n    };\n    this.increment = this.increment.bind(this); // we are binding this with all functions, except an arrow method\n  }\n\n  render() {\n    let inlineStyle = {\n      color: \"green\"\n    }; // to learn inline CSS\n\n    /*return (\r\n    <div className=\"Counter\">\r\n        <h1>Counter</h1>\r\n        <button className=\"number-button\" onClick={this.increment}>+1</button>\r\n        <span className=\"result\">{this.state.counter}</span>\r\n        <span className=\"result\">{this.state.secondCounter}</span>\r\n        <span style={{color : \"blue\"}}> Inline CSS in JSX </span>\r\n        <span style={inlineStyle}> Inline CSS in JSX with variable</span>\r\n    </div>\r\n    );*/\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Counter\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"number-button\",\n      onClick: this.increment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    }, \"+\", this.props.by), /*#__PURE__*/React.createElement(\"button\", {\n      className: \"number-button\",\n      onClick: this.decrement,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, \"-\", this.props.by));\n  }\n\n  increment() {\n    //this.state.counter ++; //bad practise\n    this.setState({\n      // setState merges the updated values\n      counter: this.state.counter + this.props.by\n    });\n    this.props.incrementMethod(this.props.by);\n  }\n\n  decrement() {\n    //this.state.counter ++; //bad practise\n    this.setState({\n      // setState merges the updated values\n      counter: this.state.counter - this.props.by\n    });\n    this.props.decrementMethod(this.props.by);\n  }\n\n}\n\nCounterButton.defaultProps = {\n  by: 1\n};\nCounterButton.propTypes = {\n  by: propTypes.number\n};\nexport default Counter;","map":{"version":3,"sources":["C:/Users/jsagar2/JavaFullStackCourse/my-first-app/src/components/counter/Counter.jsx"],"names":["React","Component","propTypes","Counter","constructor","state","counter","secondCounter","increment","bind","render","by","setState","prevState","decrement","reset","CounterButton","inlineStyle","color","props","incrementMethod","decrementMethod","defaultProps","number"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,eAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAIA,MAAMC,OAAN,SAAsBF,SAAtB,CAAgC;AAC5BG,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAG,CADD;AAETC,MAAAA,aAAa,EAAG;AAFP,KAAb;AAKD,SAAKC,SAAL,GAAkB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAlB,CAPU,CAOmC;AAC/C;;AACDC,EAAAA,MAAM,GAAG;AACL,wBACA;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,aAAD;AAAe,MAAA,eAAe,EAAI,KAAKF,SAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,oBAAC,aAAD;AAAe,MAAA,EAAE,EAAE,CAAnB;AAAsB,MAAA,eAAe,EAAI,KAAKA,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAGI,oBAAC,aAAD;AAAe,MAAA,EAAE,EAAE,CAAnB;AAAsB,MAAA,eAAe,EAAI,KAAKA,SAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ,eAKI;AAAQ,MAAA,SAAS,EAAC,OAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALJ,oBAK6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAL7C,eAMI;AAAM,MAAA,SAAS,EAAG,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA6B,KAAKH,KAAL,CAAWC,OAAxC,CANJ,CADA;AAUH;;AACDE,EAAAA,SAAS,CAACG,EAAD,EAAI;AACT;;AACA;;;AAGA,SAAKC,QAAL,CACKC,SAAD,IAAe;AACX,aAAO;AAACP,QAAAA,OAAO,EAAGO,SAAS,CAACP,OAAV,GAAoBK;AAA/B,OAAP;AACH,KAHL;AAKH;;AACDG,EAAAA,SAAS,CAACH,EAAD,EAAI;AACT;;AACA;;;AAGA,SAAKC,QAAL,CACKC,SAAD,IAAe;AACX,aAAO;AAACP,QAAAA,OAAO,EAAGO,SAAS,CAACP,OAAV,GAAoBK;AAA/B,OAAP;AACH,KAHL;AAKH;;AACDI,EAAAA,KAAK,GAAE;AACH,SAAKH,QAAL,CACKC,SAAD,IAAe;AACX,aAAO;AAACP,QAAAA,OAAO,EAAG;AAAX,OAAP;AACH,KAHL;AAKH;;AAlD2B;;AAwDhC,MAAMU,aAAN,SAA4Bf,SAA5B,CAAqC;AACjCG,EAAAA,WAAW,GAAE;AACT;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,OAAO,EAAG,CADD;AAETC,MAAAA,aAAa,EAAG;AAFP,KAAb;AAKD,SAAKC,SAAL,GAAkB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAlB,CAPU,CAOmC;AAC/C;;AAEDC,EAAAA,MAAM,GAAE;AACJ,QAAIO,WAAW,GAAG;AAACC,MAAAA,KAAK,EAAG;AAAT,KAAlB,CADI,CAEJ;;AACA;;;;;;;;;;;AAWA,wBACA;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI;AAAQ,MAAA,SAAS,EAAC,eAAlB;AAAkC,MAAA,OAAO,EAAE,KAAKV,SAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA6D,KAAKW,KAAL,CAAWR,EAAxE,CAFJ,eAGI;AAAQ,MAAA,SAAS,EAAC,eAAlB;AAAkC,MAAA,OAAO,EAAE,KAAKG,SAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAA6D,KAAKK,KAAL,CAAWR,EAAxE,CAHJ,CADA;AASH;;AACDH,EAAAA,SAAS,GAAE;AACP;AACA,SAAKI,QAAL,CAAc;AAAE;AACZN,MAAAA,OAAO,EAAG,KAAKD,KAAL,CAAWC,OAAX,GAAqB,KAAKa,KAAL,CAAWR;AADhC,KAAd;AAGA,SAAKQ,KAAL,CAAWC,eAAX,CAA2B,KAAKD,KAAL,CAAWR,EAAtC;AACH;;AACDG,EAAAA,SAAS,GAAE;AACP;AACA,SAAKF,QAAL,CAAc;AAAE;AACZN,MAAAA,OAAO,EAAG,KAAKD,KAAL,CAAWC,OAAX,GAAqB,KAAKa,KAAL,CAAWR;AADhC,KAAd;AAGA,SAAKQ,KAAL,CAAWE,eAAX,CAA2B,KAAKF,KAAL,CAAWR,EAAtC;AACH;;AAhDgC;;AAoDrCK,aAAa,CAACM,YAAd,GAA6B;AACzBX,EAAAA,EAAE,EAAG;AADoB,CAA7B;AAGAK,aAAa,CAACd,SAAd,GAA0B;AACtBS,EAAAA,EAAE,EAAGT,SAAS,CAACqB;AADO,CAA1B;AAIA,eAAepB,OAAf","sourcesContent":["import React, {Component} from 'react';\r\nimport \"./Counter.css\"\r\nimport propTypes from \"prop-types\"\r\n\r\n\r\n\r\nclass Counter extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            counter : 0,\r\n            secondCounter : 100\r\n        }\r\n\r\n       this.increment  = this.increment.bind(this); // we are binding this with all functions, except an arrow method\r\n    }\r\n    render() {\r\n        return (\r\n        <div className=\"App\">\r\n            <CounterButton incrementMethod = {this.increment}></CounterButton>\r\n            <CounterButton by={2} incrementMethod = {this.increment}></CounterButton>\r\n            <CounterButton by={3} incrementMethod = {this.increment}></CounterButton>\r\n            \r\n            <button className=\"reset\">Reset</button> <br></br>\r\n            <span className = \"result\"> {this.state.counter}</span>\r\n        </div>\r\n    );\r\n    }\r\n    increment(by){\r\n        //this.state.counter ++; //bad practise\r\n        /*this.setState({ // setState merges the updated values\r\n            counter : this.state.counter + by\r\n        })*/\r\n        this.setState(\r\n            (prevState) => {\r\n                return {counter : prevState.counter + by}\r\n            }\r\n        );\r\n    }\r\n    decrement(by){\r\n        //this.state.counter ++; //bad practise\r\n        /*this.setState({ // setState merges the updated values\r\n            counter : this.state.counter + by\r\n        })*/\r\n        this.setState(\r\n            (prevState) => {\r\n                return {counter : prevState.counter - by}\r\n            }\r\n        );\r\n    }\r\n    reset(){\r\n        this.setState(\r\n            (prevState) => {\r\n                return {counter : 0}\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nclass CounterButton extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            counter : 0,\r\n            secondCounter : 100\r\n        }\r\n\r\n       this.increment  = this.increment.bind(this); // we are binding this with all functions, except an arrow method\r\n    }\r\n  \r\n    render(){\r\n        let inlineStyle = {color : \"green\"};\r\n        // to learn inline CSS\r\n        /*return (\r\n        <div className=\"Counter\">\r\n            <h1>Counter</h1>\r\n            <button className=\"number-button\" onClick={this.increment}>+1</button>\r\n            <span className=\"result\">{this.state.counter}</span>\r\n            <span className=\"result\">{this.state.secondCounter}</span>\r\n            <span style={{color : \"blue\"}}> Inline CSS in JSX </span>\r\n            <span style={inlineStyle}> Inline CSS in JSX with variable</span>\r\n        </div>\r\n        );*/\r\n\r\n        return (\r\n        <div className=\"Counter\">\r\n            \r\n            <button className=\"number-button\" onClick={this.increment}>+{this.props.by}</button>\r\n            <button className=\"number-button\" onClick={this.decrement}>-{this.props.by}</button>\r\n            \r\n            \r\n        </div>\r\n        );\r\n    }\r\n    increment(){\r\n        //this.state.counter ++; //bad practise\r\n        this.setState({ // setState merges the updated values\r\n            counter : this.state.counter + this.props.by\r\n        })\r\n        this.props.incrementMethod(this.props.by);\r\n    }\r\n    decrement(){\r\n        //this.state.counter ++; //bad practise\r\n        this.setState({ // setState merges the updated values\r\n            counter : this.state.counter - this.props.by\r\n        })\r\n        this.props.decrementMethod(this.props.by);\r\n    }\r\n    \r\n}\r\n\r\nCounterButton.defaultProps = {\r\n    by : 1\r\n}\r\nCounterButton.propTypes = {\r\n    by : propTypes.number\r\n}\r\n\r\nexport default Counter;\r\n"]},"metadata":{},"sourceType":"module"}